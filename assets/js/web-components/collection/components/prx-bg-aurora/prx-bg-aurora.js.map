{"version":3,"file":"prx-bg-aurora.js","sourceRoot":"","sources":["../../../src/components/prx-bg-aurora/prx-bg-aurora.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Renderer, Program, Mesh, Color, Triangle } from 'ogl';\nimport { Component, Element, Host, Prop, h } from '@stencil/core';\n\nconst VERT = `#version 300 es\nin vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst FRAG = `#version 300 es\nprecision highp float;\n\nuniform float uTime;\nuniform float uAmplitude;\nuniform vec3 uColorStops[3];\nuniform vec2 uResolution;\nuniform float uBlend;\n\nout vec4 fragColor;\n\nvec3 permute(vec3 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(\n      0.211324865405187, 0.366025403784439,\n      -0.577350269189626, 0.024390243902439\n  );\n  vec2 i  = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n\n  vec3 p = permute(\n      permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0)\n  );\n\n  vec3 m = max(\n      0.5 - vec3(\n          dot(x0, x0),\n          dot(x12.xy, x12.xy),\n          dot(x12.zw, x12.zw)\n      ),\n      0.0\n  );\n  m = m * m;\n  m = m * m;\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nstruct ColorStop {\n  vec3 color;\n  float position;\n};\n\n#define COLOR_RAMP(colors, factor, finalColor) {              \\\n  int index = 0;                                            \\\n  for (int i = 0; i < 2; i++) {                               \\\n     ColorStop currentColor = colors[i];                    \\\n     bool isInBetween = currentColor.position <= factor;    \\\n     index = int(mix(float(index), float(i), float(isInBetween))); \\\n  }                                                         \\\n  ColorStop currentColor = colors[index];                   \\\n  ColorStop nextColor = colors[index + 1];                  \\\n  float range = nextColor.position - currentColor.position; \\\n  float lerpFactor = (factor - currentColor.position) / range; \\\n  finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution;\n\n  ColorStop colors[3];\n  colors[0] = ColorStop(uColorStops[0], 0.0);\n  colors[1] = ColorStop(uColorStops[1], 0.5);\n  colors[2] = ColorStop(uColorStops[2], 1.0);\n\n  vec3 rampColor;\n  COLOR_RAMP(colors, uv.x, rampColor);\n\n  float height = snoise(vec2(uv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5 * uAmplitude;\n  height = exp(height);\n  height = (uv.y * 2.0 - height + 0.2);\n  float intensity = 0.6 * height;\n\n  float midPoint = 0.20;\n  float auroraAlpha = smoothstep(midPoint - uBlend * 0.5, midPoint + uBlend * 0.5, intensity);\n\n  vec3 auroraColor = intensity * rampColor;\n\n  fragColor = vec4(auroraColor * auroraAlpha, auroraAlpha);\n}\n`;\n\n@Component({\n  tag: 'prx-bg-aurora',\n  styleUrl: 'prx-bg-aurora.css',\n  shadow: true,\n})\nexport class PrxBgAurora {\n\n  animateId = 0;\n\n  renderer: Renderer;\n\n  program: Program;\n\n  mesh: Mesh;\n\n  @Element() el: HTMLElement;\n\n  /**\n   * An array of three hex colors defining the aurora gradient.\n   */\n  @Prop() colorStops: string[] = ['#5227FF', '#7cff67', '#5227FF'];\n\n  /**\n   * Controls the height intensity of the aurora effect.\n   */\n  @Prop() amplitude: number = 1.0;\n\n  /**\n   * Controls the blending of the aurora effect with the background.\n   */\n  @Prop() blend: number = 0.5;\n\n  /**\n   * Controls the animation speed. Higher values make the aurora move faster.\n   */\n  @Prop() speed: number = 1.0;\n\n  /**\n   * Current time of animation. Use to externally control animation progress.\n   */\n  @Prop() time: number;\n\n  connectedCallback() {\n    let canvas = this.el.shadowRoot.querySelector('canvas');\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n\n      this.el.shadowRoot.appendChild(canvas);\n    }\n\n    this.renderer = new Renderer({\n      canvas,\n      alpha: true,\n      premultipliedAlpha: true,\n      antialias: true,\n      width: this.el.offsetWidth,\n      height: this.el.offsetHeight\n    });\n\n    const { amplitude, blend, colorStops, renderer } = this;\n    const { gl } = renderer;\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.canvas.style.backgroundColor = 'transparent';\n\n    const colorStopsArray = colorStops.map(hex => {\n      const c = new Color(hex);\n      return [c.r, c.g, c.b];\n    });\n\n    this.program = new Program(gl, {\n      vertex: VERT,\n      fragment: FRAG,\n      uniforms: {\n        uTime: { value: 0 },\n        uAmplitude: { value: amplitude },\n        uColorStops: { value: colorStopsArray },\n        uResolution: { value: [this.el.offsetWidth, this.el.offsetHeight] },\n        uBlend: { value: blend }\n      }\n    });\n\n    const geometry = new Triangle(gl);\n\n    if (geometry.attributes.uv) {\n      delete geometry.attributes.uv;\n    }\n\n    this.mesh =  new Mesh(gl, { geometry, program: this.program });\n\n    this.animateId = requestAnimationFrame(this.update);\n    window.addEventListener('resize', this.resize);\n\n    this.resize();\n  }\n\n  disconnectCallback() {\n    cancelAnimationFrame(this.animateId);\n    window.removeEventListener('resize', this.resize);\n    const { renderer } = this;\n    const { gl } = renderer || {};\n    gl.getExtension('WEBGL_lose_context')?.loseContext();\n  }\n\n  resize = () => {\n\n    if (!this.el) return;\n\n    const width = this.el.offsetWidth;\n    const height = this.el.offsetHeight;\n    this.renderer.setSize(width, height);\n    if (this.program) {\n      this.program.uniforms.uResolution.value = [width, height];\n    }\n    this.renderer.render({ scene: this.mesh });\n  }\n\n  update = (t: number) => {\n\n    this.animateId = requestAnimationFrame(this.update);\n\n    const { program, renderer, amplitude, blend, colorStops, time = t * 0.01, speed = 1.0 } = this;\n\n    program.uniforms.uTime.value = time * speed * 0.1;\n    program.uniforms.uAmplitude.value = amplitude;\n    program.uniforms.uBlend.value = blend;\n    program.uniforms.uColorStops.value = colorStops.map(hex => {\n      const c = new Color(hex);\n      return [c.r, c.g, c.b];\n    });\n    renderer.render({ scene: this.mesh });\n  }\n\n  render() {\n    return (\n      <Host />\n    );\n  }\n}\n"]}